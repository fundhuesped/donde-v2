{"ast":null,"code":"var _jsxFileName = \"/home/ada/wingu/donde-v2/front/src/pages/Search.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button } from '../components/Button';\nimport MainContainer from '../components/MainContainer';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Pill } from '../components/Pill';\nimport servicesData from '../assets/services.json';\nimport { usePlacesWidget } from 'react-google-autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Search = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const {\n    ref: autocompleteInputRef\n  } = usePlacesWidget({\n    apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    onPlaceSelected: place => {\n      setLocation(place.formatted_address);\n      setCoords({\n        lat: place.geometry.location.lat(),\n        lng: place.geometry.location.lng()\n      });\n    },\n    options: {\n      componentRestrictions: {\n        country: 'ar'\n      },\n      types: ['locality', 'street_address', 'sublocality', 'health', 'intersection']\n    }\n  });\n  const {\n    services: searchedServiceIds\n  } = useLocation().state;\n  const searchedServices = searchedServiceIds && searchedServiceIds.length !== 0 ? servicesData.filter(service => searchedServiceIds.includes(service.id)) : servicesData;\n  const services = searchedServices.map(service => service);\n  const [location, setLocation] = useState('');\n  const [coords, setCoords] = useState({\n    lat: -34.6989,\n    lng: -64.7597\n  });\n  const isLocationEmpty = location.trim() === '';\n\n  const handleLocationChange = event => {\n    setLocation(event.currentTarget.value);\n  };\n\n  const handleSearchButtonClicked = () => {\n    if (!isLocationEmpty) {\n      navigate('/establecimientos', {\n        state: {\n          coords\n        }\n      });\n    }\n  };\n\n  const handleSearchButtonByLocationClicked = () => {\n    navigate('/establecimientos');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'mt-2',\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'px-content',\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-black text-xs mb-2\",\n          children: \"Est\\xE1s buscando\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), services.map(service => /*#__PURE__*/_jsxDEV(Pill, {\n          children: service.name\n        }, service.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContainer, {\n      className: 'mt-8 pt-8',\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: 'text-xl text-black font-title font-bold',\n        children: \"\\xBFEn qu\\xE9 lugar estas buscando?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: 'text-xs text-black mt-2 mb-4',\n        children: \"Pod\\xE9s buscar por ciudad, departamento o barrio. Tambi\\xE9n pod\\xE9s buscar por el nombre o la direcci\\xF3n de un centro que ya conozcas.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: autocompleteInputRef,\n        className: 'rounded-lg p-3 w-full border border-light-gray focus:outline-0 mt-4',\n        placeholder: 'Ingresá la ubicación',\n        value: location,\n        onChange: handleLocationChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'mt-8',\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: 'bg-white w-full',\n          disabled: isLocationEmpty,\n          type: 'primary',\n          onClick: handleSearchButtonClicked,\n          children: \"Buscar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: 'w-full mt-4',\n          type: 'secondary',\n          onClick: handleSearchButtonByLocationClicked,\n          children: \"Buscar por mi ubicaci\\xF3n actual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Search, \"vlO6GZrDnA1eMOMj7BUTsZ836bc=\", false, function () {\n  return [useNavigate, usePlacesWidget, useLocation];\n});\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","Button","MainContainer","useLocation","useNavigate","Pill","servicesData","usePlacesWidget","Search","navigate","ref","autocompleteInputRef","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","onPlaceSelected","place","setLocation","formatted_address","setCoords","lat","geometry","location","lng","options","componentRestrictions","country","types","services","searchedServiceIds","state","searchedServices","length","filter","service","includes","id","map","coords","isLocationEmpty","trim","handleLocationChange","event","currentTarget","value","handleSearchButtonClicked","handleSearchButtonByLocationClicked","name"],"sources":["/home/ada/wingu/donde-v2/front/src/pages/Search.tsx"],"sourcesContent":["import React, { RefObject, useState } from 'react';\nimport { Button } from '../components/Button';\nimport MainContainer from '../components/MainContainer';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Pill } from '../components/Pill';\nimport servicesData from '../assets/services.json';\nimport { usePlacesWidget } from 'react-google-autocomplete';\nimport { Coordinates } from './Map';\n\ntype LocationState = {\n  services: string[];\n};\n\nconst Search = () => {\n  const navigate = useNavigate();\n\n  const { ref: autocompleteInputRef }: { ref: RefObject<HTMLInputElement> } = usePlacesWidget({\n    apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    onPlaceSelected: (place) => {\n      setLocation(place.formatted_address);\n      setCoords({ lat: place.geometry.location.lat(), lng: place.geometry.location.lng() });\n    },\n    options: {\n      componentRestrictions: { country: 'ar' },\n      types: ['locality', 'street_address', 'sublocality', 'health', 'intersection'],\n    },\n  });\n\n  const { services: searchedServiceIds } = useLocation().state as LocationState;\n  const searchedServices =\n    searchedServiceIds && searchedServiceIds.length !== 0\n      ? servicesData.filter((service) => searchedServiceIds.includes(service.id))\n      : servicesData;\n  const services = searchedServices.map((service) => service);\n\n  const [location, setLocation] = useState('');\n  const [coords, setCoords] = useState<Coordinates>({ lat: -34.6989, lng: -64.7597 });\n  const isLocationEmpty = location.trim() === '';\n\n  const handleLocationChange = (event: React.FormEvent<HTMLInputElement>) => {\n    setLocation(event.currentTarget.value);\n  };\n\n  const handleSearchButtonClicked = () => {\n    if (!isLocationEmpty) {\n      navigate('/establecimientos', { state: { coords } });\n    }\n  };\n\n  const handleSearchButtonByLocationClicked = () => {\n    navigate('/establecimientos');\n  };\n\n  return (\n    <>\n      <div className={'mt-2'}>\n        <div className={'px-content'}>\n          <p className=\"text-black text-xs mb-2\">Estás buscando</p>\n          {services.map((service) => (\n            <Pill key={service.id}>{service.name}</Pill>\n          ))}\n        </div>\n      </div>\n      <MainContainer className={'mt-8 pt-8'}>\n        <h2 className={'text-xl text-black font-title font-bold'}>¿En qué lugar estas buscando?</h2>\n        <p className={'text-xs text-black mt-2 mb-4'}>\n          Podés buscar por ciudad, departamento o barrio. También podés buscar por el nombre o la dirección de un centro que ya\n          conozcas.\n        </p>\n        <input\n          ref={autocompleteInputRef}\n          className={'rounded-lg p-3 w-full border border-light-gray focus:outline-0 mt-4'}\n          placeholder={'Ingresá la ubicación'}\n          value={location}\n          onChange={handleLocationChange}\n        />\n        <div className={'mt-8'}>\n          <Button className={'bg-white w-full'} disabled={isLocationEmpty} type={'primary'} onClick={handleSearchButtonClicked}>\n            Buscar\n          </Button>\n          <Button className={'w-full mt-4'} type={'secondary'} onClick={handleSearchButtonByLocationClicked}>\n            Buscar por mi ubicación actual\n          </Button>\n        </div>\n      </MainContainer>\n    </>\n  );\n};\n\nexport default Search;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SAASC,eAAT,QAAgC,2BAAhC;;;;AAOA,MAAMC,MAAM,GAAG,MAAM;EAAA;;EACnB,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;EAEA,MAAM;IAAEM,GAAG,EAAEC;EAAP,IAAsEJ,eAAe,CAAC;IAC1FK,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,6BADsE;IAE1FC,eAAe,EAAGC,KAAD,IAAW;MAC1BC,WAAW,CAACD,KAAK,CAACE,iBAAP,CAAX;MACAC,SAAS,CAAC;QAAEC,GAAG,EAAEJ,KAAK,CAACK,QAAN,CAAeC,QAAf,CAAwBF,GAAxB,EAAP;QAAsCG,GAAG,EAAEP,KAAK,CAACK,QAAN,CAAeC,QAAf,CAAwBC,GAAxB;MAA3C,CAAD,CAAT;IACD,CALyF;IAM1FC,OAAO,EAAE;MACPC,qBAAqB,EAAE;QAAEC,OAAO,EAAE;MAAX,CADhB;MAEPC,KAAK,EAAE,CAAC,UAAD,EAAa,gBAAb,EAA+B,aAA/B,EAA8C,QAA9C,EAAwD,cAAxD;IAFA;EANiF,CAAD,CAA3F;EAYA,MAAM;IAAEC,QAAQ,EAAEC;EAAZ,IAAmC3B,WAAW,GAAG4B,KAAvD;EACA,MAAMC,gBAAgB,GACpBF,kBAAkB,IAAIA,kBAAkB,CAACG,MAAnB,KAA8B,CAApD,GACI3B,YAAY,CAAC4B,MAAb,CAAqBC,OAAD,IAAaL,kBAAkB,CAACM,QAAnB,CAA4BD,OAAO,CAACE,EAApC,CAAjC,CADJ,GAEI/B,YAHN;EAIA,MAAMuB,QAAQ,GAAGG,gBAAgB,CAACM,GAAjB,CAAsBH,OAAD,IAAaA,OAAlC,CAAjB;EAEA,MAAM,CAACZ,QAAD,EAAWL,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACuC,MAAD,EAASnB,SAAT,IAAsBpB,QAAQ,CAAc;IAAEqB,GAAG,EAAE,CAAC,OAAR;IAAiBG,GAAG,EAAE,CAAC;EAAvB,CAAd,CAApC;EACA,MAAMgB,eAAe,GAAGjB,QAAQ,CAACkB,IAAT,OAAoB,EAA5C;;EAEA,MAAMC,oBAAoB,GAAIC,KAAD,IAA8C;IACzEzB,WAAW,CAACyB,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAAX;EACD,CAFD;;EAIA,MAAMC,yBAAyB,GAAG,MAAM;IACtC,IAAI,CAACN,eAAL,EAAsB;MACpB/B,QAAQ,CAAC,mBAAD,EAAsB;QAAEsB,KAAK,EAAE;UAAEQ;QAAF;MAAT,CAAtB,CAAR;IACD;EACF,CAJD;;EAMA,MAAMQ,mCAAmC,GAAG,MAAM;IAChDtC,QAAQ,CAAC,mBAAD,CAAR;EACD,CAFD;;EAIA,oBACE;IAAA,wBACE;MAAK,SAAS,EAAE,MAAhB;MAAA,uBACE;QAAK,SAAS,EAAE,YAAhB;QAAA,wBACE;UAAG,SAAS,EAAC,yBAAb;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,EAEGoB,QAAQ,CAACS,GAAT,CAAcH,OAAD,iBACZ,QAAC,IAAD;UAAA,UAAwBA,OAAO,CAACa;QAAhC,GAAWb,OAAO,CAACE,EAAnB;UAAA;UAAA;UAAA;QAAA,QADD,CAFH;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eASE,QAAC,aAAD;MAAe,SAAS,EAAE,WAA1B;MAAA,wBACE;QAAI,SAAS,EAAE,yCAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAG,SAAS,EAAE,8BAAd;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAME;QACE,GAAG,EAAE1B,oBADP;QAEE,SAAS,EAAE,qEAFb;QAGE,WAAW,EAAE,sBAHf;QAIE,KAAK,EAAEY,QAJT;QAKE,QAAQ,EAAEmB;MALZ;QAAA;QAAA;QAAA;MAAA,QANF,eAaE;QAAK,SAAS,EAAE,MAAhB;QAAA,wBACE,QAAC,MAAD;UAAQ,SAAS,EAAE,iBAAnB;UAAsC,QAAQ,EAAEF,eAAhD;UAAiE,IAAI,EAAE,SAAvE;UAAkF,OAAO,EAAEM,yBAA3F;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAIE,QAAC,MAAD;UAAQ,SAAS,EAAE,aAAnB;UAAkC,IAAI,EAAE,WAAxC;UAAqD,OAAO,EAAEC,mCAA9D;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAJF;MAAA;QAAA;QAAA;QAAA;MAAA,QAbF;IAAA;MAAA;MAAA;MAAA;IAAA,QATF;EAAA,gBADF;AAkCD,CA1ED;;GAAMvC,M;UACaJ,W,EAE2DG,e,EAYnCJ,W;;;KAfrCK,M;AA4EN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}