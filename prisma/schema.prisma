datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String           @id @default(uuid()) @db.Uuid
  email                String           @unique @db.VarChar(254)
  password             String           @db.VarChar(60)
  first_name           String           @db.VarChar(100)
  last_name            String           @db.VarChar(100)
  role                 UserRole
  status               UserStatus
  organization_type    OrganizationType
  organization_name    String           @db.VarChar(100)
  organization_role    String           @db.VarChar(100)
  organization_country String           @db.VarChar(100)
  organization_website String?          @db.VarChar(100)
  created_at           DateTime         @default(now())
}

enum UserRole {
  ADMIN
  COLLABORATOR
}

enum UserStatus {
  PENDING
  ACTIVE
  BLOCKED
}

enum OrganizationType {
  SOCIAL_ORGANIZATION
  PUBLIC_INSTITUTION
  PRIVATE_INSTITUTION
  OTHER
}

enum EstablishmentType {
  HEALTH_ESTABLISHMENT
  SOCIAL_ORGANIZATION
  PUBLIC_INSTITUTION
  PRIVATE_INSTITUTION
  EDUCATIONAL_INSTITUTION
  OTHER
}

enum EstablishmentStatus {
  PUBLISHED
  REJECTED
}

model Service {
  id             String      @id @default(uuid()) @db.Uuid
  name           String      @unique @db.VarChar(100)
  icon           String      @db.VarChar(100)
  servicesOnEstablishments ServiceOnEstablishment[]
  subservices    Subservice[]
}

model Subservice {
  id                String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  serviceId         String        @db.Uuid
  service           Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  name              String        @db.VarChar(100)
  servicesOnEstablishments        ServiceOnEstablishment[]
  @@unique([serviceId, name])
  @@index([serviceId])
}

model Establishment {
  id           String                        @id @default(uuid()) @db.Uuid
  officialId   String?                       @db.VarChar(100)
  legacyId     Int?                          @unique
  name         String                        @db.VarChar(100)
  services     ServiceOnEstablishment[]
  type         EstablishmentType
  street       String                        @db.VarChar(200)
  streetNumber String?                       @db.VarChar(100)
  apartment    String?                       @db.VarChar(100)
  intersection String?                       @db.VarChar(400)
  details      String?                       @db.VarChar(500)
  website      String?                       @db.VarChar(2048)
  city         String                        @db.VarChar(200)
  department   String                        @db.VarChar(200)
  province     String                        @db.VarChar(200)
  country      String                        @db.VarChar(100)
  status       EstablishmentStatus
  latitude     Float
  longitude    Float
}

model ServiceOnEstablishment {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  establishmentId String        @db.Uuid
  service         Service       @relation(fields: [serviceId], references: [id])
  serviceId       String        @db.Uuid
  email           String?       @db.VarChar(254)
  phoneNumber     String?       @db.VarChar(100)
  details         String?       @db.Text
  subservice      Subservice?   @relation(fields: [subserviceId], references: [id])
  subserviceId    String?       @db.Uuid
  openingTimes    ServiceOnEstablishmentOpeningTime[]
  @@index([establishmentId])
  @@index([serviceId])
}

enum Day {
  M
  T
  W
  R
  F
  S
  U
}

model ServiceOnEstablishmentOpeningTime {
  id                             String                       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  serviceOnEstablishment         ServiceOnEstablishment       @relation(fields: [serviceOnEstablishmentId], references: [id], onDelete: Cascade)
  serviceOnEstablishmentId       String                       @db.Uuid
  day                            Day
  startTime                      DateTime                     @db.Time()
  endTime                        DateTime                     @db.Time()
  @@index([serviceOnEstablishmentId])
}
