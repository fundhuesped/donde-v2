datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String           @id @default(uuid()) @db.Uuid
  email                String           @unique @db.VarChar(254)
  password             String           @db.VarChar(60)
  first_name           String           @db.VarChar(100)
  last_name            String           @db.VarChar(100)
  role                 UserRole
  status               UserStatus
  organization_type    OrganizationType
  organization_name    String           @db.VarChar(100)
  organization_role    String           @db.VarChar(100)
  organization_country String           @db.VarChar(100)
  organization_website String           @db.VarChar(100)
  created_at           DateTime         @default(now())
}

enum UserRole {
  ADMIN
  COLLABORATOR
}

enum UserStatus {
  PENDING
  ACTIVE
  BLOCKED
}

enum OrganizationType {
  SOCIAL_ORGANIZATION
  PUBLIC_INSTITUTION
  PRIVATE_INSTITUTION
  OTHER
}

enum EstablishmentType {
  HEALTH_ESTABLISHMENT
  SOCIAL_ORGANIZATION
  PUBLIC_INSTITUTION
  PRIVATE_INSTITUTION
  EDUCATIONAL_INSTITUTION
  OTHER
}

enum EstablishmentStatus {
  PUBLISHED
  REJECTED
}

model Service {
  id          String      @id @default(uuid()) @db.Uuid
  name        String      @unique @db.VarChar(100)
  icon        String      @db.VarChar(100)
  specialties Specialty[]
}

model Specialty {
  id             String                        @id @default(uuid()) @db.Uuid
  name           String                        @unique @db.VarChar(100)
  service        Service                       @relation(fields: [serviceId], references: [id])
  serviceId      String                        @db.Uuid
  establishments SpecialtiesOnEstablishments[]

  @@index([serviceId])
}

model Establishment {
  id           String                        @id @default(uuid()) @db.Uuid
  officialId   String?                       @db.VarChar(100)
  legacyId     Int?                          @unique
  name         String                        @db.VarChar(100)
  specialties  SpecialtiesOnEstablishments[]
  type         EstablishmentType
  street       String                        @db.VarChar(100)
  streetNumber String?                       @db.VarChar(100)
  apartment    String?                       @db.VarChar(100)
  intersection String?                       @db.VarChar(100)
  details      String?                       @db.VarChar(100)
  website      String?                       @db.VarChar(100)
  city         String                        @db.VarChar(100)
  department   String                        @db.VarChar(100)
  province     String                        @db.VarChar(100)
  country      String                        @db.VarChar(100)
  status       EstablishmentStatus
  latitude     Decimal                       @db.Decimal(8, 6)
  longitude    Decimal                       @db.Decimal(9, 6)
}

model SpecialtiesOnEstablishments {
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  establishmentId String        @db.Uuid
  specialty       Specialty     @relation(fields: [specialtyId], references: [id])
  specialtyId     String        @db.Uuid

  @@id([establishmentId, specialtyId])
  @@index([establishmentId, specialtyId])
}
